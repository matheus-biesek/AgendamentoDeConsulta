events {}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    server {
        listen 80;
        server_name localhost;

        # Página principal
        location / {
            root /usr/share/nginx/html;
            index index.html;
            try_files $uri $uri/ =404;
        }

        # Proxy reverso para serviços do back end.
        location /rest-auth/ {
            proxy_pass http://wildfly-auth:8080/java_ee_auth-1.0-SNAPSHOT/rest-auth/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Authorization "Bearer $cookie_token";
        }

        # Protegendo páginas privadas
        location ~ /admin/(admin-update|admin-schedule-grid)\.html$ {
            auth_request /validate-page-admin; # redirecionamento para back end
            error_page 403 = @redirect_to_blocked; # caso a resposta do redirecionamento seja 403, redirecionar para pagina blocked
            error_page 401 = @redirect_to_blocked; # caso a resposta do redirecionamento seja 401, redirecionar para pagina blocked
            root /usr/share/nginx/html;
            index index.html;
            try_files $uri $uri/ =404;
        }
        location ~ /doctor/(doctor-appointment-schedule-grid|doctor-appointment-start)\.html$ {
            auth_request /validate-page-doctor; # redirecionamento para back end
            error_page 403 = @redirect_to_blocked; # caso a resposta do redirecionamento seja 403, redirecionar para pagina blocked
            error_page 401 = @redirect_to_blocked; # caso a resposta do redirecionamento seja 401, redirecionar para pagina blocked
            root /usr/share/nginx/html;
            index index.html;
            try_files $uri $uri/ =404;
        }
        location ~ /nurse/(nurse-appointment-schedule-grid|nurse-appointment-start)\.html$ {
            auth_request /validate-page-nurse; # redirecionamento para back end
            error_page 403 = @redirect_to_blocked; # caso a resposta do redirecionamento seja 403, redirecionar para pagina blocked
            error_page 401 = @redirect_to_blocked; # caso a resposta do redirecionamento seja 401, redirecionar para pagina blocked
            root /usr/share/nginx/html;
            index index.html;
            try_files $uri $uri/ =404;
        }
        location ~ /patient/(patient-appointment|patient-info)\.html$ {
            auth_request /validate-page-patient; # redirecionamento para back end
            error_page 403 = @redirect_to_blocked; # caso a resposta do redirecionamento seja 403, redirecionar para pagina blocked
            error_page 401 = @redirect_to_blocked; # caso a resposta do redirecionamento seja 401, redirecionar para pagina blocked
            root /usr/share/nginx/html;
            index index.html;
            try_files $uri $uri/ =404;
        }
        location ~ /secretary/(secretary-cancell-appointment|secretary-create-patient|secretary-making-appointment)\.html$ {
            auth_request /validate-page-secretary; # redirecionamento para back end
            error_page 403 = @redirect_to_blocked; # caso a resposta do redirecionamento seja 403, redirecionar para pagina blocked
            error_page 401 = @redirect_to_blocked; # caso a resposta do redirecionamento seja 401, redirecionar para pagina blocked
            root /usr/share/nginx/html;
            index index.html;
            try_files $uri $uri/ =404;
        }
        location ~ /technician/(technician-schedule|technician-appointment-start.html)\.html$ {
            auth_request /validate-page-technician; # redirecionamento para back end
            error_page 403 = @redirect_to_blocked; # caso a resposta do redirecionamento seja 403, redirecionar para pagina blocked
            error_page 401 = @redirect_to_blocked; # caso a resposta do redirecionamento seja 401, redirecionar para pagina blocked
            root /usr/share/nginx/html;
            index index.html;
            try_files $uri $uri/ =404;
        }

        # validação para acessar as páginas privadas
        location = /validate-page-admin {
            internal;
            proxy_pass http://wildfly-auth:8080/java_ee_auth-1.0-SNAPSHOT/rest-auth/auth-front/validate-admin;
            proxy_pass_request_body off;                # importante para evitar enviar corpo
            proxy_set_header Content-Length "";         # obrigatório se desativar o corpo
            proxy_set_header Host $host;
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header Authorization "Bearer $cookie_token";
        }
        location = /validate-page-doctor {
            internal;
            proxy_pass http://wildfly-auth:8080/java_ee_auth-1.0-SNAPSHOT/rest-auth/auth-front/validate-doctor;
            proxy_pass_request_body off;                # importante para evitar enviar corpo
            proxy_set_header Content-Length "";         # obrigatório se desativar o corpo
            proxy_set_header Host $host;
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header Authorization "Bearer $cookie_token";
        }
        location = /validate-page-nurse {
            internal;
            proxy_pass http://wildfly-auth:8080/java_ee_auth-1.0-SNAPSHOT/rest-auth/auth-front/validate-nurse;
            proxy_pass_request_body off;                # importante para evitar enviar corpo
            proxy_set_header Content-Length "";         # obrigatório se desativar o corpo
            proxy_set_header Host $host;
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header Authorization "Bearer $cookie_token";
        }
        location = /validate-page-patient {
            internal;
            proxy_pass http://wildfly-auth:8080/java_ee_auth-1.0-SNAPSHOT/rest-auth/auth-front/validate-patient;
            proxy_pass_request_body off;                # importante para evitar enviar corpo
            proxy_set_header Content-Length "";         # obrigatório se desativar o corpo
            proxy_set_header Host $host;
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header Authorization "Bearer $cookie_token";
        }
        location = /validate-page-secretary {
            internal;
            proxy_pass http://wildfly-auth:8080/java_ee_auth-1.0-SNAPSHOT/rest-auth/auth-front/validate-secretary;
            proxy_pass_request_body off;                # importante para evitar enviar corpo
            proxy_set_header Content-Length "";         # obrigatório se desativar o corpo
            proxy_set_header Host $host;
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header Authorization "Bearer $cookie_token";
        }
        location = /validate-page-technician {
            internal;
            proxy_pass http://wildfly-auth:8080/java_ee_auth-1.0-SNAPSHOT/rest-auth/auth-front/validate-technician;
            proxy_pass_request_body off;                # importante para evitar enviar corpo
            proxy_set_header Content-Length "";         # obrigatório se desativar o corpo
            proxy_set_header Host $host;
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header Authorization "Bearer $cookie_token";
        }

        # Redirecionamento de páginas privadas.
        location = /blocked.html {
            root /usr/share/nginx/html;
        }
        location @redirect_to_blocked {
            return 307 /blocked.html;
        }
    }
}
